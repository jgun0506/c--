#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>


typedef struct {
	struct tm start;
	struct tm end;
} TimePeriod;

struct tm parse_datetime(char* datetime_str) {
	//Implement your code
	//input을 sec으로 변환한뒤, struct tm * p; p=gmtime(변환된 sec의 주소값);구조체로리턴
	
	struct tm p={0};
	strptime(datetime_str, "%Y-%m-%d %H:%M", &p);
	
	return p;
}

TimePeriod detect_schedule_conflict(struct tm *start1, struct tm *end1, 
                                    struct tm *start2, struct tm *end2) {
	//Implement your code
	//두 기간동안 겹치는 시간을 리턴해라 ex){2023-11-20 11:00,2023-11-20 12:00} 이런식으로 구조체를 반환해야함
	//겹치는 기간을 구조체로 새롭게 선언하여 겹치는 start,end값 으로 초기화하여 구조체 자체를 리턴
	//만약 겹치는 시간이 없다면, 아무거나 ex)return;
	TimePeriod p={0};
	

	if(mktime(end1)>mktime(start2) && mktime(end2) > mktime(end1)){
		p.start=*start2;
		p.end=*end1;		
	}
	
	return p;
}

void print_time(struct tm *t) {
	printf("%02d:%02d", t->tm_hour, t->tm_min);
}

void print_schedule_conflict(TimePeriod *overlap) {
	if (overlap->start.tm_year != 0) { 
		printf("Schedule conflict detected on %04d-%02d-%02d between ",
					 overlap->start.tm_year + 1900, overlap->start.tm_mon + 1, overlap->start.tm_mday);
		print_time(&overlap->start);
		printf(" and ");
		print_time(&overlap->end);
		printf(".\n");
	} else {
		printf("No schedule conflict.\n");
	}
}

int main() {
	struct tm periods[8][2] = {
		{parse_datetime("2023-11-20 09:00"), parse_datetime("2023-11-20 12:00")},
		{parse_datetime("2023-11-20 11:00"), parse_datetime("2023-11-20 13:00")},
		{parse_datetime("2023-11-20 14:00"), parse_datetime("2023-11-20 15:00")},
		{parse_datetime("2023-11-20 15:30"), parse_datetime("2023-11-20 16:00")},
		{parse_datetime("2023-11-21 17:00"), parse_datetime("2023-11-21 18:00")},
		{parse_datetime("2023-11-21 18:00"), parse_datetime("2023-11-21 19:00")},			
		{parse_datetime("2023-11-21 08:00"), parse_datetime("2023-11-21 09:00")},
		{parse_datetime("2023-11-22 08:00"), parse_datetime("2023-11-22 09:00")},		
	};

	for (int i = 0; i < 4; i++) {
		TimePeriod overlap = detect_schedule_conflict(&periods[i][0], &periods[i][1], &periods[i + 1][0], &periods[i + 1][1]);
		print_schedule_conflict(&overlap);
	}

	return 0;
}
